import {
  createBaseVNode,
  defineComponent,
  getCurrentInstance,
  h,
  mergeProps,
  onBeforeUnmount,
  onMounted,
  ref,
  render,
  renderSlot,
  setBlockTracking,
  unref,
  watch
} from "./chunk-YBGSFZ7G.js";
import "./chunk-PLDDJCW6.js";

// node_modules/datatables.net-vue3/dist/datatables.net-vue3.mjs
var w = [
  "childRow",
  "column-sizing",
  "column-visibility",
  "destroy",
  "draw",
  "error",
  "init",
  "length",
  "order",
  "page",
  "preDraw",
  "preInit",
  "preXhr",
  "processing",
  "requestChild",
  "search",
  "stateLoadParams",
  "stateLoaded",
  "stateSaveParams",
  "xhr",
  "autoFill",
  "preAutoFill",
  "buttons-action",
  "buttons-processing",
  "column-reorder",
  "key",
  "key-blur",
  "key-focus",
  "key-refocus",
  "key-return-submit",
  "responsive-display",
  "responsive-resize",
  "rowgroup-datasrc",
  "pre-row-reorder",
  "row-reorder",
  "row-reordered",
  "dtsb-inserted",
  "deselect",
  "select",
  "select-blur",
  "selectItems",
  "selectStyle",
  "user-select",
  "stateRestore-change"
];
var m;
var C = {
  name: "Datatables.netVue",
  inheritAttrs: false,
  use(i) {
    m = i;
  }
};
var L = defineComponent({
  ...C,
  props: {
    ajax: null,
    columns: null,
    data: null,
    options: null
  },
  emits: w,
  setup(i, { expose: d }) {
    const o = i, y = ref(null), u = {}, l = ref(), D = ref([]);
    watch(
      () => o.data,
      (t) => {
        let e = l.value;
        e && (f(e), e.clear(), e.rows.add(t).draw(false));
      },
      {
        deep: true
      }
    ), onMounted(() => {
      var a;
      const t = getCurrentInstance();
      let e = Object.assign({}, o.options) || {};
      if (o.data && (e.data = o.data, k(e.data)), o.columns && (e.columns = o.columns), e.columns && b(e.columns, t), o.ajax && (e.ajax = o.ajax), e.columnDefs || (e.columnDefs = []), t) {
        let n = Object.keys(t.slots);
        for (let r = 0; r < n.length; r++) {
          let s = n[r];
          if (s.match(/^column\-/)) {
            let c = s.replace("column-", "");
            e.columnDefs.push({
              target: c.match(/^\d+$/) ? parseInt(c) : c + ":name",
              render: "#" + s
            });
          }
        }
        b(e.columnDefs, t);
      }
      if (!m)
        throw new Error(
          "DataTables library not set. See https://datatables.net/tn/19 for details."
        );
      l.value = new m(unref(y), e), (a = l.value) == null || a.on("preXhr", function() {
        f(l.value);
      });
      for (let n of w)
        l.value && t && l.value.on(n, function() {
          var r = Array.from(arguments), s = r.shift();
          r.unshift({ event: s, dt: l }), r.unshift(n), t.emit.apply(t, r);
        });
    }), onBeforeUnmount(() => {
      var t;
      f(l.value), (t = l.value) == null || t.destroy(true);
    });
    function k(t) {
      D.value = t.value ? t.value.slice() : t.slice();
    }
    function v(t) {
      return function(e, a, n, r) {
        let s = r.row + "," + r.col;
        if (!u[s]) {
          let c = h("div", t({
            cellData: e,
            colIndex: r.col,
            rowData: n,
            rowIndex: r.row,
            type: a
          }));
          u[s] = document.createElement("div"), render(c, u[s]);
        }
        return u[s];
      };
    }
    function b(t, e) {
      if (e)
        for (let n = 0; n < t.length; n++) {
          let r = t[n];
          if (typeof r.render == "string" && r.render.charAt(0) === "#") {
            var a = r.render.replace("#", "");
            e.slots[a] && (r.render = v(e.slots[a]));
          } else if (typeof r.render == "object" && typeof r.render.display == "string" && r.render.display.charAt(0) === "#") {
            var a = r.render.display.replace("#", "");
            e.slots[a] && (r.render.display = v(e.slots[a]));
          }
        }
    }
    function f(t) {
      let e = Object.keys(u), a = t.table().node().id;
      for (var n = 0; n < e.length; n++)
        e[n].indexOf(a + ",") === 0 && delete u[e[n]];
    }
    return d({
      dt: l
    }), (t, e) => e[0] || (setBlockTracking(-1), e[0] = createBaseVNode("div", { class: "datatable" }, [
      createBaseVNode("table", mergeProps({
        ref_key: "table",
        ref: y
      }, t.$attrs, { style: { width: "100%" } }), [
        renderSlot(t.$slots, "default")
      ], 16)
    ]), setBlockTracking(1), e[0]);
  }
});
var V = (() => {
  const i = L;
  return i.install = (d) => {
    d.component("Datatables.netVue", i);
  }, i;
})();
export {
  L as DataTable,
  V as default
};
//# sourceMappingURL=datatables__net-vue3.js.map
